#!/bin/bash
set -e

help() {
  cat <<EOF
Usage: gh milestone
EOF
}

#static=
#while [ $# -gt 0 ]; do
#  case "$1" in
#  -h|--help)
#    help
#    exit 0
#    ;;
#  --static)
#    static=1
#    ;;
#  *)
#    help >&2
#    exit 1
#    ;;
#  esac
#  shift
#done

echo "Welcome to gh milestone!"
echo
echo "INFO: bash version ${BASH_VERSION} (${BASH_VERSINFO[5]})"
echo

if [[ $# != 2 ]]; then
  echo "Usage: $(basename "$0") OLD_MILESTONE NEW_MILESTONE"
  exit 1
fi
old_milestone_title="$1"
new_milestone_title="$2"

# TODO: Multiple
#owner=OpenDRR
#repo=opendrr-api
owner=${owner:-'{owner}'}
repo=${repo:-'{repo}'}

# Get ${old_milestone_number} and ${new_milestone_number}
prefixes=(old new)
for prefix in "${prefixes[@]}"; do
  title_var=${prefix}_milestone_title
  number_var=${prefix}_milestone_number
  echo -n "Checking ${prefix} milestone \"${!title_var}\"... "
  declare "${number_var}"="$(gh api --cache 1m -X GET "repos/${owner}/${repo}/milestones" \
                          --jq ".[] | select(.title == \"${!title_var}\").number")"
  if [[ -z ${!number_var} ]]; then
    if [[ ${prefix} == "new" ]]; then
      echo "does not exist"
      read -r -p "Create the new milestone \"${new_milestone_title}\" now? [y/N] " response
      case "$response" in
        [yY][eE][sS]|[yY]) 
          ;;
        *)
	  echo "Exiting..."
	  exit 1
          ;;
      esac
      default_due_date=$(date --date='TZ="America/Vancouver" 14:30 2 Thursday' --iso-8601)
      read -r -p "Due date for \"${new_milestone_title}\"? [${default_due_date}] " due_date
      case "$due_date" in
        2[0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9])
	  # Valid date
          ;;
        "")
	  due_date="$default_due_date"
	;;
        *)
	  echo "Invalid date, exiting..."
	  exit 1
	  ;;
      esac
      echo "Great! Creating Milestone \"${new_milestone_title}\" due on ${due_date}..." 
      new_milestone_number="$(gh api -X POST "repos/${owner}/${repo}/milestones" \
	      -f title="${new_milestone_title}" \
	      -f due_on="${due_date}T14:30:00-07:00" \
	      --jq ".number")"
      echo "New milestone \"${new_milestone_title}\" created (#${new_milestone_number})"
    else  # old milestone
      echo
      echo "Error: \"${old_milestone_title}\" does not exist, aborting."
      exit 1
    fi
  else
    echo "exists (#${!number_var})"
  fi
done

echo
echo "Open Issues in \"${old_milestone_title}\" (previous milestone):"
echo
issuesJSON="$(gh api -X GET --cache 2m "repos/${owner}/${repo}/issues" \
	-f milestone="${old_milestone_number}" \
	-f direction=asc)"
while IFS= read -r line; do
  echo $line
done < <(jq -r '.[] | "#\(.number): \(.assignee.login) \(.title)"' < <(echo "${issuesJSON}"))

echo ""
echo "Getting ready to move issues..."

while IFS= read -r -u 3 i; do
  title=$(echo "${issuesJSON}" | jq -r ".[] | select(.number == ${i}).title")
  echo
  read -r -p "Move \"Issue #${i}: ${title}\" to ${new_milestone_title}? [y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY]) 
      gh api -X PATCH "repos/${owner}/${repo}/issues/$i" -f milestone="${new_milestone_number}" --silent
      ;;
    *)
      # do_something_else
      ;;
  esac
done 3< <(jq -r '.[].number' < <(echo "${issuesJSON}"))
